# ---  Tail Docker JSON logs -----------------------------------------------
<source>
  @type tail
  path /var/lib/docker/containers/*/*-json.log
  pos_file /fluentd/log/docker-containers.pos
  tag docker.*
  read_from_head true
  <parse>
    @type json
    time_key time
    time_type string
    time_format %Y-%m-%dT%H:%M:%S.%N%:z
    keep_time_key true
  </parse>
</source>

# ---  Enrich with Docker metadata (0.1.3 fields: id,name,container_hostname,image,image_id)
<filter docker.**>
  @type docker_metadata
  docker_url unix:///var/run/docker.sock
  include_container_label false
  include_env false
</filter>

# 1) Campos Ãºtiles + labels normalizados (puntos -> guiones bajos)
<filter docker.**>
  @type record_transformer
  enable_ruby true
  <record>
    container_name  ${ (n = record.dig("docker","name")) ? n.sub(%r{^/}, "") : "" }
    container_host  ${ record.dig("docker","container_hostname") || "" }
    image           ${ record.dig("docker","image") || "" }
    docker_labels   ${ (ls = record.dig("docker","labels")) ? ls.each_with_object({}){|(k,v),h| h[k.to_s.gsub('.', '_')] = v } : {} }
    compose_service ${ (ls = record.dig("docker","labels")) ? (ls["com.docker.compose.service"]  || "") : "" }
    compose_project ${ (ls = record.dig("docker","labels")) ? (ls["com.docker.compose.project"] || "") : "" }
  </record>
</filter>

# 2) Eliminar el objeto original docker.labels (anidado) para evitar conflictos de mapping
<filter docker.**>
  @type record_transformer
  enable_ruby true
  <record>
    docker ${ (d = record["docker"] ? record["docker"].dup : nil) ? (d.delete("labels"); d) : nil }
  </record>
</filter>

# --- Ship to Elasticsearch ------------------------------------------------
<match docker.**>
  @type elasticsearch
  hosts elasticsearch:9200
  logstash_format true
  logstash_prefix docker-logs
  include_tag_key true
  reconnect_on_error true
  reload_connections true
  request_timeout 30s
</match>
